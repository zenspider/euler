# Euler #14:

# n  n/2 (n is even)
# n  3n + 1 (n is odd)
#
# Using the rule above and starting with 13, we generate the following sequence:
#
# 13  40  20  10  5  16  8  4  2  1

class Collatz
  include Enumerable

  @@n = {}
  @@c = {}

  def initialize start
    @curr = start
  end

  def each
    loop do
      yield @curr
      break if @curr == 1
      @curr = collatz @curr
    end
  end

  def collatz n
    @@n[n] ||= n.odd? ? (3 * n + 1) : (n / 2)
  end

  def self.size n
    @@c[n] ||= begin
                 c = self.new
               end
  end
end

# p :euler => 14
# max = (2..1_000).max_by { |n|
#   s = Collatz.new(n).map.to_a.size
#   p n => s if n % 1000 == 0
#   s
# }
# p max => Collatz.new(max).map.to_a
#
# p 871 => Collatz.new(871).map.to_a == [871, 2614, 1307, 3922, 1961, 5884, 2942, 1471, 4414, 2207, 6622, 3311, 9934, 4967, 14902, 7451, 22354, 11177, 33532, 16766, 8383, 25150, 12575, 37726, 18863, 56590, 28295, 84886, 42443, 127330, 63665, 190996, 95498, 47749, 143248, 71624, 35812, 17906, 8953, 26860, 13430, 6715, 20146, 10073, 30220, 15110, 7555, 22666, 11333, 34000, 17000, 8500, 4250, 2125, 6376, 3188, 1594, 797, 2392, 1196, 598, 299, 898, 449, 1348, 674, 337, 1012, 506, 253, 760, 380, 190, 95, 286, 143, 430, 215, 646, 323, 970, 485, 1456, 728, 364, 182, 91, 274, 137, 412, 206, 103, 310, 155, 466, 233, 700, 350, 175, 526, 263, 790, 395, 1186, 593, 1780, 890, 445, 1336, 668, 334, 167, 502, 251, 754, 377, 1132, 566, 283, 850, 425, 1276, 638, 319, 958, 479, 1438, 719, 2158, 1079, 3238, 1619, 4858, 2429, 7288, 3644, 1822, 911, 2734, 1367, 4102, 2051, 6154, 3077, 9232, 4616, 2308, 1154, 577, 1732, 866, 433, 1300, 650, 325, 976, 488, 244, 122, 61, 184, 92, 46, 23, 70, 35, 106, 53, 160, 80, 40, 20, 10, 5, 16, 8, 4, 2, 1]

############################################################
# n = 13
# until n == 1 do
#   p n
#   n = Collatz.collatz n
# end

